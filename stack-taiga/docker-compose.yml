# Taiga Stack - Agile Project Management
# Based on official taigaio/taiga-docker repository
# Deploy via Portainer oder: docker-compose up -d

version: "3.5"

x-environment:
  &default-back-environment
  # Database settings
  POSTGRES_DB: "taiga"
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  POSTGRES_HOST: "taiga-db"
  # Taiga settings
  TAIGA_SECRET_KEY: "${SECRET_KEY}"
  TAIGA_SITES_SCHEME: "${TAIGA_SCHEME}"
  TAIGA_SITES_DOMAIN: "${TAIGA_DOMAIN}"
  TAIGA_SUBPATH: "${SUBPATH}"
  # Email settings
  EMAIL_BACKEND: "django.core.mail.backends.${EMAIL_BACKEND}.EmailBackend"
  DEFAULT_FROM_EMAIL: "${EMAIL_DEFAULT_FROM}"
  EMAIL_USE_TLS: "${EMAIL_USE_TLS}"
  EMAIL_USE_SSL: "${EMAIL_USE_SSL}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
  EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"
  # RabbitMQ settings
  RABBITMQ_USER: "${RABBITMQ_USER}"
  RABBITMQ_PASS: "${RABBITMQ_PASS}"
  # Telemetry
  ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"

x-volumes:
  &default-back-volumes
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media

services:
  # ============================================
  # Taiga Database (PostgreSQL)
  # ============================================
  taiga-db:
    image: postgres:12.3
    container_name: taiga-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: "taiga"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
    networks:
      - taiga-internal

  # ============================================
  # Taiga Backend (Django API)
  # ============================================
  taiga-back:
    image: taigaio/taiga-back:latest
    container_name: taiga-back
    restart: unless-stopped
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga-internal
      - devops-network
    extra_hosts:
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
      - "taiga.devops.local:host-gateway"
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_started
      taiga-async-rabbitmq:
        condition: service_started

  # ============================================
  # Taiga Async (Celery Worker)
  # ============================================
  taiga-async:
    image: taigaio/taiga-back:latest
    container_name: taiga-async
    restart: unless-stopped
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - taiga-internal
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-events-rabbitmq:
        condition: service_started
      taiga-async-rabbitmq:
        condition: service_started

  # ============================================
  # RabbitMQ for Async Tasks
  # ============================================
  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga-async-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-async-rabbitmq"
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga-internal

  # ============================================
  # Taiga Frontend (Angular SPA)
  # ============================================
  taiga-front:
    image: taigaio/taiga-front:latest
    container_name: taiga-front
    restart: unless-stopped
    environment:
      TAIGA_URL: "${TAIGA_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_WEBSOCKETS_URL: "${WEBSOCKETS_SCHEME}://${TAIGA_DOMAIN}"
      TAIGA_SUBPATH: "${SUBPATH}"
    networks:
      - taiga-internal

  # ============================================
  # Taiga Events (WebSocket Server)
  # ============================================
  taiga-events:
    image: taigaio/taiga-events:latest
    container_name: taiga-events
    restart: unless-stopped
    environment:
      RABBITMQ_USER: "${RABBITMQ_USER}"
      RABBITMQ_PASS: "${RABBITMQ_PASS}"
      TAIGA_SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga-internal
    depends_on:
      taiga-events-rabbitmq:
        condition: service_started

  # ============================================
  # RabbitMQ for Events
  # ============================================
  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga-events-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_ERLANG_COOKIE: "${RABBITMQ_ERLANG_COOKIE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "${RABBITMQ_VHOST}"
    hostname: "taiga-events-rabbitmq"
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - taiga-internal

  # ============================================
  # Taiga Protected (File Downloads)
  # ============================================
  taiga-protected:
    image: taigaio/taiga-protected:latest
    container_name: taiga-protected
    restart: unless-stopped
    environment:
      MAX_AGE: "${ATTACHMENTS_MAX_AGE}"
      SECRET_KEY: "${SECRET_KEY}"
    networks:
      - taiga-internal

  # ============================================
  # Taiga Gateway (Nginx Reverse Proxy)
  # ============================================
  taiga-gateway:
    image: nginx:1.19-alpine
    container_name: taiga-gateway
    restart: unless-stopped
    volumes:
      - ./taiga.conf:/etc/nginx/conf.d/default.conf
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
    networks:
      - taiga-internal
      - devops-network
    extra_hosts:
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
      - "taiga.devops.local:host-gateway"
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events
    labels:
      # Traefik Integration
      - "traefik.enable=true"
      - "traefik.http.routers.taiga.rule=Host(`taiga.devops.local`)"
      - "traefik.http.routers.taiga.entrypoints=web"
      - "traefik.http.services.taiga.loadbalancer.server.port=80"
      - "traefik.docker.network=devops-network"

volumes:
  taiga-static-data:
  taiga-media-data:
  taiga-db-data:
  taiga-async-rabbitmq-data:
  taiga-events-rabbitmq-data:

networks:
  devops-network:
    external: true
  taiga-internal:
    driver: bridge
