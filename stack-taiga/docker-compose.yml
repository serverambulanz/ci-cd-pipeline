# Taiga Stack - Agile Project Management
# Deploy via Portainer oder: docker compose up -d

services:
  # ============================================
  # Taiga Database (PostgreSQL)
  # ============================================
  taiga-db:
    image: postgres:16-alpine
    container_name: taiga-db
    restart: unless-stopped
    volumes:
      - taiga_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=taiga
      - POSTGRES_USER=taiga
      - POSTGRES_PASSWORD=${TAIGA_DB_PASSWORD}
    networks:
      - taiga-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taiga"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Taiga Events (WebSocket Server)
  # ============================================
  taiga-events:
    image: taigaio/taiga-events:latest
    container_name: taiga-events
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://taiga:${TAIGA_RABBITMQ_PASSWORD}@taiga-rabbitmq:5672/taiga
      - TAIGA_SECRET_KEY=${TAIGA_SECRET_KEY}
    networks:
      - taiga-internal
    depends_on:
      - taiga-rabbitmq

  # ============================================
  # RabbitMQ (Message Queue for Events)
  # ============================================
  taiga-rabbitmq:
    image: rabbitmq:3.13-alpine
    container_name: taiga-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=taiga
      - RABBITMQ_DEFAULT_PASS=${TAIGA_RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=taiga
    volumes:
      - taiga_rabbitmq:/var/lib/rabbitmq
    networks:
      - taiga-internal
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Taiga Backend (Django API)
  # ============================================
  taiga-back:
    image: taigaio/taiga-back:latest
    container_name: taiga-back
    restart: unless-stopped
    depends_on:
      taiga-db:
        condition: service_healthy
      taiga-rabbitmq:
        condition: service_healthy
    volumes:
      - taiga_static:/taiga-back/static
      - taiga_media:/taiga-back/media
    extra_hosts:
      # Container-interne DNS-Auflösung aller DevOps Services über Host → Traefik
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
      - "taiga.devops.local:host-gateway"
    environment:
      # Database Configuration
      - POSTGRES_DB=taiga
      - POSTGRES_USER=taiga
      - POSTGRES_PASSWORD=${TAIGA_DB_PASSWORD}
      - POSTGRES_HOST=taiga-db
      - POSTGRES_PORT=5432

      # Taiga Settings
      - TAIGA_SECRET_KEY=${TAIGA_SECRET_KEY}
      - TAIGA_SITES_SCHEME=http
      - TAIGA_SITES_DOMAIN=taiga.devops.local
      - TAIGA_SUBPATH=

      # Email Configuration (optional)
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      # Falls Sie E-Mail konfigurieren möchten:
      # - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      # - DEFAULT_FROM_EMAIL=noreply@taiga.devops.local
      # - EMAIL_HOST=smtp.example.com
      # - EMAIL_PORT=587
      # - EMAIL_HOST_USER=
      # - EMAIL_HOST_PASSWORD=
      # - EMAIL_USE_TLS=True

      # RabbitMQ Configuration
      - EVENTS_PUSH_BACKEND=taiga.events.backends.rabbitmq.EventsPushBackend
      - EVENTS_PUSH_BACKEND_URL=amqp://taiga:${TAIGA_RABBITMQ_PASSWORD}@taiga-rabbitmq:5672/taiga

      # Public Registration (optional)
      - PUBLIC_REGISTER_ENABLED=true

      # GitHub Integration (optional)
      - ENABLE_GITHUB_AUTH=false
      # - GITHUB_CLIENT_ID=
      # - GITHUB_CLIENT_SECRET=

      # GitLab Integration (optional)
      - ENABLE_GITLAB_AUTH=false
      # - GITLAB_URL=https://gitlab.com
      # - GITLAB_CLIENT_ID=
      # - GITLAB_CLIENT_SECRET=

      # Gitea Integration (custom, falls verfügbar)
      # Taiga unterstützt Gitea nicht nativ, aber über Webhooks möglich

    networks:
      - taiga-internal
      - devops-network

  # ============================================
  # Taiga Async (Celery Worker)
  # ============================================
  taiga-async:
    image: taigaio/taiga-back:latest
    container_name: taiga-async
    restart: unless-stopped
    depends_on:
      - taiga-db
      - taiga-rabbitmq
    volumes:
      - taiga_static:/taiga-back/static
      - taiga_media:/taiga-back/media
    environment:
      # Same as taiga-back
      - POSTGRES_DB=taiga
      - POSTGRES_USER=taiga
      - POSTGRES_PASSWORD=${TAIGA_DB_PASSWORD}
      - POSTGRES_HOST=taiga-db
      - POSTGRES_PORT=5432
      - TAIGA_SECRET_KEY=${TAIGA_SECRET_KEY}
      - TAIGA_SITES_SCHEME=http
      - TAIGA_SITES_DOMAIN=taiga.devops.local
      - TAIGA_SUBPATH=
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - EVENTS_PUSH_BACKEND=taiga.events.backends.rabbitmq.EventsPushBackend
      - EVENTS_PUSH_BACKEND_URL=amqp://taiga:${TAIGA_RABBITMQ_PASSWORD}@taiga-rabbitmq:5672/taiga
    networks:
      - taiga-internal
    command: ["celery", "-A", "taiga", "worker", "-B", "--loglevel=info"]

  # ============================================
  # Taiga Frontend (Angular SPA)
  # ============================================
  taiga-front:
    image: taigaio/taiga-front:latest
    container_name: taiga-front
    restart: unless-stopped
    depends_on:
      - taiga-back
      - taiga-events
    environment:
      - TAIGA_URL=http://taiga.devops.local
      - TAIGA_WEBSOCKETS_URL=ws://taiga.devops.local
      - TAIGA_SUBPATH=
    networks:
      - taiga-internal

  # ============================================
  # Taiga Gateway (Nginx)
  # ============================================
  taiga-gateway:
    image: nginx:1.27-alpine
    container_name: taiga-gateway
    restart: unless-stopped
    depends_on:
      - taiga-front
      - taiga-back
      - taiga-events
    volumes:
      - taiga_static:/taiga/static:ro
      - taiga_media:/taiga/media:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    extra_hosts:
      # Container-interne DNS-Auflösung aller DevOps Services über Host → Traefik
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
      - "taiga.devops.local:host-gateway"
    networks:
      - devops-network
      - taiga-internal
    labels:
      # ==================
      # Traefik Integration
      # ==================
      - "traefik.enable=true"

      # HTTP Router für Taiga UI
      - "traefik.http.routers.taiga.rule=Host(`taiga.devops.local`)"
      - "traefik.http.routers.taiga.entrypoints=web"
      - "traefik.http.services.taiga.loadbalancer.server.port=80"

      # Docker Network für Traefik
      - "traefik.docker.network=devops-network"

volumes:
  taiga_db:
  taiga_rabbitmq:
  taiga_static:
  taiga_media:

networks:
  devops-network:
    external: true
  taiga-internal:
    driver: bridge
