# Plane Stack - Modern Project Management
# Official deployment based on makeplane/plane
# Documentation: https://docs.plane.so/

version: "3.8"

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  plane-db:
    image: postgres:15-alpine
    container_name: plane-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "plane"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - plane-db-data:/var/lib/postgresql/data
    networks:
      - plane-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d plane"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis (Cache & Queue)
  # ============================================
  plane-redis:
    image: redis:7.2-alpine
    container_name: plane-redis
    restart: unless-stopped
    volumes:
      - plane-redis-data:/data
    networks:
      - plane-internal

  # ============================================
  # MinIO (S3-compatible Object Storage)
  # ============================================
  plane-minio:
    image: minio/minio:latest
    container_name: plane-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - plane-minio-data:/data
    networks:
      - plane-internal

  # ============================================
  # Plane Web (Frontend - Next.js)
  # ============================================
  plane-web:
    image: makeplane/plane-frontend:stable
    container_name: plane-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: "http://project.devops.local"
      NEXT_PUBLIC_DEPLOY_URL: "http://project.devops.local"
    networks:
      - plane-internal
    depends_on:
      - plane-api

  # ============================================
  # Plane API (Backend - Django)
  # ============================================
  plane-api:
    image: makeplane/plane-backend:stable
    container_name: plane-api
    restart: unless-stopped
    environment:
      # Django Settings
      SECRET_KEY: "${SECRET_KEY}"
      DEBUG: "0"
      DJANGO_SETTINGS_MODULE: "plane.settings.production"

      # Database
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/plane"

      # Redis
      REDIS_URL: "redis://plane-redis:6379/"

      # Celery
      CELERY_BROKER_URL: "redis://plane-redis:6379/0"

      # MinIO/S3
      USE_MINIO: "1"
      AWS_ACCESS_KEY_ID: "${MINIO_ROOT_USER}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_ROOT_PASSWORD}"
      AWS_S3_ENDPOINT_URL: "http://plane-minio:9000"
      AWS_S3_BUCKET_NAME: "plane"
      AWS_REGION: "us-east-1"

      # Application URLs
      WEB_URL: "http://project.devops.local"
      CORS_ALLOWED_ORIGINS: "http://project.devops.local"

      # Email (optional)
      EMAIL_HOST: "${EMAIL_HOST:-}"
      EMAIL_PORT: "${EMAIL_PORT:-587}"
      EMAIL_HOST_USER: "${EMAIL_HOST_USER:-}"
      EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD:-}"
      EMAIL_USE_TLS: "${EMAIL_USE_TLS:-1}"
      DEFAULT_FROM_EMAIL: "${DEFAULT_FROM_EMAIL:-noreply@project.devops.local}"

      # Security
      ENABLE_SIGNUP: "${ENABLE_SIGNUP:-1}"
    volumes:
      - plane-logs:/code/plane/logs
    networks:
      - plane-internal
    depends_on:
      plane-db:
        condition: service_healthy
      plane-redis:
        condition: service_started
      plane-minio:
        condition: service_started

  # ============================================
  # Plane Worker (Celery Background Tasks)
  # ============================================
  plane-worker:
    image: makeplane/plane-backend:stable
    container_name: plane-worker
    restart: unless-stopped
    command: celery -A plane worker -l info
    environment:
      # Same env as API
      SECRET_KEY: "${SECRET_KEY}"
      DEBUG: "0"
      DJANGO_SETTINGS_MODULE: "plane.settings.production"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/plane"
      REDIS_URL: "redis://plane-redis:6379/"
      CELERY_BROKER_URL: "redis://plane-redis:6379/0"
      USE_MINIO: "1"
      AWS_ACCESS_KEY_ID: "${MINIO_ROOT_USER}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_ROOT_PASSWORD}"
      AWS_S3_ENDPOINT_URL: "http://plane-minio:9000"
      AWS_S3_BUCKET_NAME: "plane"
      AWS_REGION: "us-east-1"
      WEB_URL: "http://project.devops.local"
    volumes:
      - plane-logs:/code/plane/logs
    networks:
      - plane-internal
    depends_on:
      plane-api:
        condition: service_started

  # ============================================
  # Plane Beat (Celery Scheduler)
  # ============================================
  plane-beat:
    image: makeplane/plane-backend:stable
    container_name: plane-beat
    restart: unless-stopped
    command: celery -A plane beat -l info
    environment:
      SECRET_KEY: "${SECRET_KEY}"
      DEBUG: "0"
      DJANGO_SETTINGS_MODULE: "plane.settings.production"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/plane"
      REDIS_URL: "redis://plane-redis:6379/"
      CELERY_BROKER_URL: "redis://plane-redis:6379/0"
      WEB_URL: "http://project.devops.local"
    volumes:
      - plane-logs:/code/plane/logs
    networks:
      - plane-internal
    depends_on:
      plane-api:
        condition: service_started

  # ============================================
  # Plane Proxy (Nginx Gateway)
  # ============================================
  plane-proxy:
    image: makeplane/plane-proxy:stable
    container_name: plane-proxy
    restart: unless-stopped
    environment:
      FILE_SIZE_LIMIT: "100M"
      BUCKET_NAME: "plane"
    networks:
      - plane-internal
      - devops-network
    extra_hosts:
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
      - "project.devops.local:host-gateway"
    depends_on:
      - plane-web
      - plane-api
    labels:
      # Traefik Integration
      - "traefik.enable=true"
      - "traefik.http.routers.plane.rule=Host(`project.devops.local`)"
      - "traefik.http.routers.plane.entrypoints=web"
      - "traefik.http.services.plane.loadbalancer.server.port=80"
      - "traefik.docker.network=devops-network"

volumes:
  plane-db-data:
  plane-redis-data:
  plane-minio-data:
  plane-logs:

networks:
  devops-network:
    external: true
  plane-internal:
    driver: bridge
