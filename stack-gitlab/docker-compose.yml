version: "3.9"

services:
  postgres:
    image: postgres:16.8
    container_name: gitlab-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: gitlab
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: gitlabhq_production
      # Minimale Environment Variablen für maximale Kompatibilität
      POSTGRES_MAX_CONNECTIONS: 200
    # FIX 1: PostgreSQL Performance Limits (aus Performance Guide)
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-2}'
          memory: '${POSTGRES_MEMORY_LIMIT:-4096m}'
        reservations:
          cpus: '1'
          memory: '2048m'
    # FIX 2: PostgreSQL Configuration File mit Performance Tuning
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    # FIX 3: PostgreSQL mit custom config starten
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
  # FIX 23: Robuste PostgreSQL Health Check mit docker ps
    healthcheck:
      test: ["CMD-SHELL", "sleep 10; docker exec postgres pg_isready -U gitlab -d gitlabhq_production"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    networks:
      - gitlab-internal

  # =============================================
  # pgBouncer - Connection Pooler für PostgreSQL Performance
  # =============================================
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: gitlab-pgbouncer
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    # FIX 13: pgBouncer Performance Configuration (aus Performance Guide)
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '512m'
        reservations:
          cpus: '0.5'
          memory: '256m'
    environment:
      DB_USER: gitlab
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeMe}
      DB_HOST: postgres
      DB_NAME: gitlabhq_production
      # FIX 14: pgBouncer Connection Pool Settings (aus Performance Guide)
      MAX_CLIENT_CONN: 500
      DEFAULT_POOL_SIZE: 50
      ADMIN_USERS: gitlab
      ADMIN_PASSWORD: ${POSTGRES_PASSWORD:-changeMe}
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
    ports:
      - "6432:6432"
    networks:
      - gitlab-internal
    # FIX 19: Disable pgBouncer health check to break circular dependency
    healthcheck:
      disable: true

  redis:
    image: redis:7.4.2-alpine
    container_name: gitlab-redis
    restart: unless-stopped
    # FIX 4: Redis Performance (2GB Cache mit volatile-lru statt 512MB allkeys-lru)
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "2gb", "--maxmemory-policy", "volatile-lru", "--save", "900", "1", "--save", "300", "10", "--save", "60", "10000"]
  # FIX 5: Redis Performance Limits (aus Performance Guide)
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-1}'
          memory: '${REDIS_MEMORY_LIMIT:-2048m}'
        reservations:
          cpus: '0.5'
          memory: '512m'
    volumes:
      - redis_data:/data
    sysctls:
      - net.core.somaxconn=65535
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - gitlab-internal

  gitlab:
    image: gitlab/gitlab-ce:18.5.1-ce.0
    container_name: gitlab
    restart: unless-stopped
    hostname: gitlab.devops.local
  # FIX 17: GitLab Dependencies auf pgBouncer (Performance Mode)
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      # SSH Port (direkt, nicht über Traefik)
      - "2222:22"
    shm_size: "1024m"  # Erhöht für Assets Compilation
    # FIX 9: GitLab Performance Limits (4vCPU/8GB RAM aus Performance Guide)
    deploy:
      resources:
        limits:
          cpus: '${GITLAB_CPU_LIMIT:-4}'
          memory: '${GITLAB_MEMORY_LIMIT:-8192m}'
        reservations:
          cpus: '2'
          memory: '4096m'
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    extra_hosts:
      # Container-interne DNS-Auflösung aller DevOps Services über Host → Traefik
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
      - "dashboard.devops.local:host-gateway"
      - "registry.devops.local:host-gateway"
      - "logs.devops.local:host-gateway"
      - "trivy.devops.local:host-gateway"
  # FIX 6: Komplette GitLab Omnibus Konfiguration (basierend auf Performance Guide)
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # External URL über Traefik
        external_url '${GITLAB_EXTERNAL_URL:-http://git.devops.local}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT:-2222}

        # FIX 15: PostgreSQL über pgBouncer Connection Pool (aus Performance Guide)
        postgresql['enable'] = false
        redis['enable'] = false
        gitlab_rails['db_host'] = 'pgbouncer'
        gitlab_rails['db_port'] = 6432
        gitlab_rails['db_password'] = '${POSTGRES_PASSWORD:-changeMe}'
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_port'] = 6379

        # Email deaktiviert für lokale Entwicklung
        gitlab_rails['gitlab_email_enabled'] = false

        # FIX 7: Puma Webserver Performance (aus Performance Guide)
        puma['worker_processes'] = 4
        puma['threads_min'] = 4
        puma['threads_max'] = 8

        # FIX 8: Workhorse & NGINX Tuning (aus Performance Guide)
        gitlab_workhorse['enable'] = true
        gitlab_workhorse['proxy_headers_timeout'] = "240s"
        nginx['gzip'] = "on"
        nginx['gzip_comp_level'] = "5"
        nginx['gzip_types'] = "text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml"

        # Sidekiq deaktivieren (externer Container)
        sidekiq['enable'] = false

        # GitLab Features
        gitlab_rails['gitlab_default_projects_features_issues'] = true
        gitlab_rails['gitlab_default_projects_features_merge_requests'] = true
        gitlab_rails['gitlab_default_projects_features_wiki'] = true
        gitlab_rails['gitlab_default_projects_features_snippets'] = true
        gitlab_rails['gitlab_default_projects_features_builds'] = true

        # Container Registry deaktiviert (wir nutzen Harbor)
        registry['enable'] = false

        # Pages deaktiviert
        gitlab_rails['pages_enabled'] = false
    networks:
      - devops-network
      - gitlab-internal
    labels:
      # ==================
      # Traefik Integration
      # ==================
      - "traefik.enable=true"

      # HTTP Router
      - "traefik.http.routers.gitlab.rule=Host(`git.devops.local`)"
      - "traefik.http.routers.gitlab.entrypoints=web"
      - "traefik.http.routers.gitlab.service=gitlab"
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"

      # Middleware für GitLab Redirects und Headers
      - "traefik.http.middlewares.gitlab-headers.headers.customRequestHeaders.X-Forwarded-Proto=http"
      - "traefik.http.routers.gitlab.middlewares=gitlab-headers"

      # Docker Network für Traefik
      - "traefik.docker.network=devops-network"

      # Health Check (Path der von außen funktioniert)
      - "traefik.http.services.gitlab.loadbalancer.healthcheck.path=/users/sign_in"
      - "traefik.http.services.gitlab.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.gitlab.loadbalancer.healthcheck.timeout=10s"
    healthcheck:
      # Interner Health Check über Nginx
      test: ["CMD", "curl", "-f", "http://localhost/-/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # GitLab Runner mit gleicher Version wie GitLab CE
  gitlab-runner:
    image: gitlab/gitlab-runner:v18.5.0
    container_name: gitlab-runner
    restart: unless-stopped
    depends_on:
      gitlab:
        condition: service_healthy
    volumes:
      - gitlab_runner:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CI_SERVER_URL: "${GITLAB_EXTERNAL_URL:-http://git.devops.local}"
      REGISTRATION_TOKEN: "${GITLAB_RUNNER_REG_TOKEN}"
      RUNNER_EXECUTOR: "${RUNNER_EXECUTOR:-docker}"
      RUNNER_DOCKER_IMAGE: "${RUNNER_DOCKER_IMAGE:-alpine:latest}"
      RUNNER_TAGS: "${RUNNER_TAGS:-docker,local}"
      RUNNER_NAME: "${RUNNER_NAME:-local-docker-runner}"
      RUNNER_RUN_UNTAGGED: "${RUNNER_RUN_UNTAGGED:-true}"
      RUNNER_LOCKED: "${RUNNER_LOCKED:-false}"
      RUNNER_REQUEST_CONCURRENCY: "${RUNNER_REQUEST_CONCURRENCY:-1}"
      RUNNER_OUTPUT_LIMIT: "${RUNNER_OUTPUT_LIMIT:-4096}"
    extra_hosts:
      # DNS-Auflösung für GitLab
      - "git.devops.local:host-gateway"
    networks:
      - devops-network
    command: ["/bin/bash", "-c", "if [ ! -f /etc/gitlab-runner/config.toml ] && [ -n \"${REGISTRATION_TOKEN}\" ]; then echo \"Registering GitLab Runner...\"; gitlab-runner register --non-interactive --url \"${CI_SERVER_URL}\" --registration-token \"${REGISTRATION_TOKEN}\" --executor \"${RUNNER_EXECUTOR}\" --docker-image \"${RUNNER_DOCKER_IMAGE}\" --docker-volumes \"/var/run/docker.sock:/var/run/docker.sock\" --name \"${RUNNER_NAME}\" --tag-list \"${RUNNER_TAGS}\" --run-untagged=\"${RUNNER_RUN_UNTAGGED}\" --locked=\"${RUNNER_LOCKED}\" --access-level \"not_protected\"; elif [ -f /etc/gitlab-runner/config.toml ]; then echo \"GitLab Runner already configured.\"; else echo \"Waiting for REGISTRATION_TOKEN in environment variables...\"; sleep 30; fi; exec gitlab-runner run --user=gitlab-runner --working-directory=/home/gitlab-runner"]

  # ============================================
  # Sidekiq - Background Job Processor (ausgelagert, optimiert)
  # ============================================
  sidekiq:
    image: gitlab/gitlab-ce:18.5.1-ce.0
    container_name: gitlab-sidekiq
    restart: unless-stopped
    # FIX 18: Sidekiq Dependencies auf pgBouncer (Performance Mode)
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    # FIX 11: Sidekiq Resource Limits (aus Performance Guide)
    deploy:
      resources:
        limits:
          cpus: '${SIDEKIQ_CPU_LIMIT:-2}'
          memory: '${SIDEKIQ_MEMORY_LIMIT:-4096m}'
        reservations:
          cpus: '1'
          memory: '2048m'
    shm_size: "256m"
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    extra_hosts:
      # Container-interne DNS-Auflösung
      - "traefik.devops.local:host-gateway"
      - "git.devops.local:host-gateway"
      - "ci.devops.local:host-gateway"
  # FIX 12: Sidekiq Optimized Configuration (aus Performance Guide)
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # Nur Sidekiq aktivieren
        sidekiq['enable'] = true
        sidekiq['concurrency'] = 20
        sidekiq['max_retries'] = 3
        sidekiq['queue_groups'] = {
          'mailers' => {
            'namespace' => 'mailers',
            'weight' => 2
          }
        }

        # Alle unnötigen Services deaktivieren
        puma['enable'] = false
        gitlab_workhorse['enable'] = false
        nginx['enable'] = false
        gitaly['enable'] = false
        mailroom['enable'] = false
        postgresql['enable'] = false
        redis['enable'] = false

        # FIX 16: Sidekiq ebenfalls über pgBouncer (wie GitLab)
        gitlab_rails['db_host'] = 'pgbouncer'
        gitlab_rails['db_port'] = 6432
        gitlab_rails['db_database'] = 'gitlabhq_production'
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = '${POSTGRES_PASSWORD}'
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_port'] = 6379

        # Email deaktiviert
        gitlab_rails['gitlab_email_enabled'] = false

        # Logging
        log_directory = '/var/log/gitlab/sidekiq'
        log_rotation = { 'count' => 30, 'size' => '100M' }
        sidekiq['queue_groups'] = {
          'mailers' => {
            'namespace' => 'mailers',
            'weight' => 2
          }
        }

        # Email deaktiviert
        gitlab_rails['gitlab_email_enabled'] = false

        # Logging
        log_directory = '/var/log/gitlab/sidekiq'
        log_rotation = { 'count' => 30, 'size' => '100M' }
    networks:
      - devops-network
      - gitlab-internal
    labels:
      # Health Check für Sidekiq
      - "traefik.enable=false"  # Kein externer Zugriff
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  gitlab_config:
    driver: local
  gitlab_logs:
    driver: local
  gitlab_data:
    driver: local
  gitlab_runner:
    driver: local
  gitlab_sidekiq_logs:
    driver: local

networks:
  devops-network:
    external: true
  gitlab-internal:
    driver: bridge
    internal: true